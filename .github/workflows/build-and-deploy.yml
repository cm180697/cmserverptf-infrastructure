# .github/workflows/build-and-deploy.yml
name: Build and Deploy Container

on:
  push:
    branches: [ main ]
    paths:
      - 'functions/**'
      - 'pyproject.toml'
      - 'poetry.lock'
      - '.github/workflows/build-and-deploy.yml'

permissions:
  id-token: write
  contents: read

jobs:
  build-push-and-deploy:
    name: Build, Push to ECR, and Deploy to ECS
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubActionsDeployRole
          aws-region: us-east-2

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: portfolio-visitor-counter
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:latest -f functions/visitor-counter/Dockerfile .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY --all-tags
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Force new deployment of ECS service
        env:
          CLUSTER_NAME: portfolio-cluster
          SERVICE_NAME: visitor-counter-service
        run: |
          aws ecs update-service --cluster $CLUSTER_NAME --service $SERVICE_NAME --force-new-deployment